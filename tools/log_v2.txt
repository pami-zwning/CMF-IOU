/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
2024-09-11 21:43:23,097   INFO  **********************Start logging**********************
2024-09-11 21:43:23,097   INFO  CUDA_VISIBLE_DEVICES=0,1
2024-09-11 21:43:23,097   INFO  total_batch_size: 4
2024-09-11 21:43:23,097   INFO  cfg_file         cfgs/models/kitti/CMF-IOU_wo_SD_wo_Res_multicls_v2.yaml
2024-09-11 21:43:23,097   INFO  batch_size       2
2024-09-11 21:43:23,097   INFO  epochs           20
2024-09-11 21:43:23,097   INFO  workers          4
2024-09-11 21:43:23,097   INFO  extra_tag        default
2024-09-11 21:43:23,097   INFO  ckpt             None
2024-09-11 21:43:23,097   INFO  pretrained_model None
2024-09-11 21:43:23,097   INFO  launcher         pytorch
2024-09-11 21:43:23,097   INFO  tcp_port         20017
2024-09-11 21:43:23,097   INFO  sync_bn          False
2024-09-11 21:43:23,097   INFO  fix_random_seed  True
2024-09-11 21:43:23,097   INFO  ckpt_save_interval 1
2024-09-11 21:43:23,097   INFO  local_rank       0
2024-09-11 21:43:23,097   INFO  max_ckpt_save_num 30
2024-09-11 21:43:23,097   INFO  merge_all_iters_to_one_epoch False
2024-09-11 21:43:23,097   INFO  set_cfgs         None
2024-09-11 21:43:23,097   INFO  max_waiting_mins 0
2024-09-11 21:43:23,097   INFO  start_epoch      0
2024-09-11 21:43:23,097   INFO  save_to_file     False
2024-09-11 21:43:23,097   INFO  cfg.ROOT_DIR: /home/ubuntu/zwning/CMF-IOU
2024-09-11 21:43:23,098   INFO  cfg.LOCAL_RANK: 0
2024-09-11 21:43:23,098   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/kitti
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATASET: KittiDatasetCMF
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.MM_PATH: velodyne_depth
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train_sfd_seguv.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:10', 'Pedestrian:10', 'Cyclist:10'], 'NUM_POINT_FEATURES': 8, 'NUM_POINT_FEATURES_PSEUDO': 9, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, -0.2], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'da_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train_sfd_seguv.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:10', 'Pedestrian:10', 'Cyclist:10'], 'MIN_SAMPLING_DIS': 0, 'MAX_SAMPLING_DIS': 20, 'OCCLUSION_NOISE': 0.2, 'OCCLUSION_OFFSET': 2.0, 'SAMPLING_METHOD': 'LiDAR-aware', 'VERT_RES': 0.006, 'HOR_RES': 0.003, 'NUM_POINT_FEATURES': 8, 'NUM_POINT_FEATURES_PSEUDO': 9, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, -0.2], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'random_local_noise', 'LOCAL_ROT_RANGE': [-0.78539816, 0.78539816], 'TRANSLATION_STD': [1.0, 1.0, 0.5], 'GLOBAL_ROT_RANGE': [0.0, 0.0], 'EXTRA_WIDTH': [0.2, 0.2, 0.0]}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}, {'NAME': 'random_local_trans', 'TRANSLATION_STD': [1.0, 1.0, 0.2]}, {'NAME': 'random_local_pyramid_aug', 'DROP_PROB': 0.25, 'SPARSIFY_PROB': 0.05, 'SPARSIFY_MAX_NUM': 50, 'SWAP_PROB': 0.1, 'SWAP_MAX_NUM': 50}]
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'r', 'g', 'b', 'u', 'v']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'i', 'r', 'g', 'b', 'u', 'v']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type_mm: absolute_coordinates_encoding_mm
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list_mm: ['x', 'y', 'z', 'r', 'g', 'b', 'u', 'v']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list_mm: ['x', 'y', 'z', 'r', 'g', 'b', 'mask', 'u', 'v']
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.05], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/kitti_dataset.yaml
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.INPUT_DISCARD_RATE: 0.8
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.ROT_NUM: 3
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.USE_VAN: True
2024-09-11 21:43:23,098   INFO  
cfg.DATA_CONFIG.X_TRANS = edict()
2024-09-11 21:43:23,098   INFO  cfg.DATA_CONFIG.X_TRANS.AUG_CONFIG_LIST: [{'NAME': 'world_rotation', 'WORLD_ROT_ANGLE': [0.3, 0.3, 0]}, {'NAME': 'world_flip', 'ALONG_AXIS_LIST': [0, 1.0, 1.0]}, {'NAME': 'world_scaling', 'WORLD_SCALE_RANGE': [0.98, 1.02, 1.0]}]
2024-09-11 21:43:23,098   INFO  
cfg.MODEL = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.NAME: VoxelRCNN
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.VFE = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2024-09-11 21:43:23,098   INFO  cfg.MODEL.VFE.MODEL: max
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.NAME: VCEConv8x
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.NUM_FILTERS: [16, 32, 64, 64]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWNSAMPLE_KERNEL_SIZE: [3, 3]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWNSAMPLE_STRIDE: [2, 2]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.RETURN_NUM_FEATURES_AS_DICT: True
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.OUT_FEATURES: 64
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.SD_BRANCH: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWN_KERNEL_SIZE: [3, 3, 3]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWN_STRIDE: [1, 2, 2]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWN_FILTERS: [2, 1, 1]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.DOWN_LAST_LAYERS: 6
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.RESVC_BRANCH: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.MM: True
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_3D.LAYER_DISCARD_RATE: 0.15
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2024-09-11 21:43:23,098   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [4, 4]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [64, 128]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [128, 128]
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'Car', 'anchor_sizes': [[3.9, 1.6, 1.56]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-1.78], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.45}, {'class_name': 'Pedestrian', 'anchor_sizes': [[0.8, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'Cyclist', 'anchor_sizes': [[1.76, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}]
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2024-09-11 21:43:23,098   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.ROI_HEAD = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.NAME: CPVIOUHead
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.ROT_NUM: 3
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.IOU_GENERATE: False
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.CROSS_ATTN: True
2024-09-11 21:43:23,098   INFO  
cfg.MODEL.ROI_HEAD.PART = edict()
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.PART.IN_CHANNEL: 256
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.PART.SIZE: 7
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.PART.GRID_OFFSETS: [0.0, 40.0]
2024-09-11 21:43:23,098   INFO  cfg.MODEL.ROI_HEAD.PART.FEATMAP_STRIDE: 0.4
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.SHARED_FC: [256, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.IOU_FC: [256, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.01
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 4000
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.USE_FAST_NMS: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.SCORE_THRESH: 0.0
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 2000
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 50
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.75
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.ENABLE: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.FEATURES_SOURCE: ['x_conv3', 'x_conv4']
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.PRE_MLP: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.GRID_SIZE: 6
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS = edict()
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.MLPS: [[32, 32], [32, 32]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_RADIUS: [0.4, 0.8]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.NSAMPLE: [16, 16]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_METHOD: max_pool
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.MLPS: [[32, 32], [32, 32]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_RADIUS: [0.8, 1.6]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.NSAMPLE: [16, 16]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_METHOD: max_pool
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.ENABLE: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.FEATURES_SOURCE: ['x_conv3', 'x_conv4']
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.PRE_MLP: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.GRID_SIZE: 4
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS = edict()
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.MLPS: [[32, 32], [32, 32]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.POOL_RADIUS: [0.4, 0.8]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.NSAMPLE: [16, 16]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.POOL_METHOD: max_pool
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.MLPS: [[32, 32], [32, 32]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.POOL_RADIUS: [0.8, 1.6]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.NSAMPLE: [16, 16]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.POOL_METHOD: max_pool
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_POINT_CROP = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_CROP.POOL_EXTRA_WIDTH: [0.2, 0.2, 0.6]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_CROP.DEPTH_NORMALIZER: 70.0
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_POINT_POOL = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.ENABLE: False
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.USE_ROI_AWARE_POOL: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.POOL_SIZE: 12
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.NUM_FEATURES: 128
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.MAX_POINTS_PER_VOXEL: 64
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.NUM_POINTS: 20
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.OUTPUT_DIM: 512
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.CHANNEL_MID: [512, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.NUM_FEATURES_RAW: 90
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.POOL_METHOD: max
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.KERNEL_TYPE: coords_5x5_dilate
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.ENABLE: False
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.USE_ROI_AWARE_POOL: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.POOL_SIZE: 6
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.NUM_FEATURES: 128
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.MAX_POINTS_PER_VOXEL: 64
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.NUM_POINTS: 50
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.OUTPUT_DIM: 512
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.CHANNEL_MID: [512, 256]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.NUM_FEATURES_RAW: 90
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.POOL_METHOD: max
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL_MM.KERNEL_TYPE: coords_5x5_dilate
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.ROI_PER_IMAGE: 160
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.FG_RATIO: 0.5
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_FG_THRESH: [0.75, 0.65, 0.65]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_BG_THRESH: [0.25, 0.15, 0.15]
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.REG_FG_THRESH: [0.5, 0.45, 0.45]
2024-09-11 21:43:23,099   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1 = edict()
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.ROI_PER_IMAGE: 160
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.FG_RATIO: 0.5
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,099   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_FG_THRESH: [0.75, 0.65, 0.65]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_BG_THRESH: [0.25, 0.15, 0.15]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.REG_FG_THRESH: [0.55, 0.5, 0.5]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2 = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.ROI_PER_IMAGE: 160
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.FG_RATIO: 0.5
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_FG_THRESH: [0.75, 0.65, 0.65]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_BG_THRESH: [0.25, 0.15, 0.15]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.REG_FG_THRESH: [0.6, 0.55, 0.55]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.BOX_CODER: ResidualCoder
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0 = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.SAM_PER_IMAGE: 100
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.RANDOM_NUM: 50
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.SAMPLING_EACH_BBOX: 15
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.OFFSET_THRESHOLD: [0.1, 0.05, 0.03, 0.02]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.SCALE_THRESHOLD: [0.9, 0.95, 0.97, 0.98]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.IOU_THRESHOLD: [[0.7, 0.8], [0.8, 0.9], [0.9, 0.95], [0.95, 1.0]]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.FG_RATIO: 0.5
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.CLS_FG_THRESH: [0.75]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.CLS_BG_THRESH: [0.25]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.REG_FG_THRESH: [0.5]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.ENABLE_HARD_SAMPLING: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.HARD_SAMPLING_THRESH: [0.5]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE0.HARD_SAMPLING_RATIO: [0.5]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1 = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.SAM_PER_IMAGE: 100
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.RANDOM_NUM: 50
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.SAMPLING_EACH_BBOX: 15
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.OFFSET_THRESHOLD: [0.05, 0.03, 0.02]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.SCALE_THRESHOLD: [0.95, 0.97, 0.98]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.IOU_THRESHOLD: [[0.8, 0.9], [0.9, 0.95], [0.95, 1.0]]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.FG_RATIO: 0.5
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.CLS_FG_THRESH: [0.75]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.CLS_BG_THRESH: [0.25]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.REG_FG_THRESH: [0.55]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.ENABLE_HARD_SAMPLING: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.HARD_SAMPLING_THRESH: [0.5]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE1.HARD_SAMPLING_RATIO: [0.5]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2 = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.SAM_PER_IMAGE: 100
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.RANDOM_NUM: 60
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.SAMPLING_EACH_BBOX: 40
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.OFFSET_THRESHOLD: [0.03, 0.02]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.SCALE_THRESHOLD: [0.97, 0.98]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.IOU_THRESHOLD: [[0.9, 0.95], [0.95, 1.0]]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.FG_RATIO: 0.5
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.SAMPLE_ROI_BY_EACH_CLASS: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.CLS_SCORE_TYPE: roi_iou_x
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.CLS_FG_THRESH: [0.75]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.CLS_BG_THRESH: [0.25]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.CLS_BG_THRESH_LO: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.HARD_BG_RATIO: 0.8
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.REG_FG_THRESH: [0.6]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.ENABLE_HARD_SAMPLING: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.HARD_SAMPLING_THRESH: [0.5]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.SAMPLING_CONFIG.STAGE2.HARD_SAMPLING_RATIO: [0.5]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.IOU_LOSS: smooth-l1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.IOU_VALID_THRESHOLD: 0.3
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.GRID_3D_IOU_LOSS: False
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_iou3d_weight: 1.0
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_iou_weight: 1.0
2024-09-11 21:43:23,100   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.IOU_THRESH: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.IoU: 0.85
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.RL: True
2024-09-11 21:43:23,100   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2024-09-11 21:43:23,100   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2024-09-11 21:43:23,100   INFO  
cfg.OPTIMIZATION = edict()
2024-09-11 21:43:23,100   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 20
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.LR: 0.01
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2024-09-11 21:43:23,101   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2024-09-11 21:43:23,101   INFO  cfg.TAG: CMF-IOU_wo_SD_wo_Res_multicls_v2
2024-09-11 21:43:23,101   INFO  cfg.EXP_GROUP_PATH: models/kitti
2024-09-11 21:43:23,500   INFO  Database filter by min points Car: 14357 => 13532
2024-09-11 21:43:23,501   INFO  Database filter by min points Pedestrian: 2207 => 2168
2024-09-11 21:43:23,501   INFO  Database filter by min points Cyclist: 734 => 705
2024-09-11 21:43:23,508   INFO  Database filter by difficulty Car: 13532 => 10759
2024-09-11 21:43:23,510   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2024-09-11 21:43:23,510   INFO  Database filter by difficulty Cyclist: 705 => 581
2024-09-11 21:43:23,559   INFO  Database filter by min points Car: 14357 => 13532
2024-09-11 21:43:23,560   INFO  Database filter by min points Pedestrian: 2207 => 2168
2024-09-11 21:43:23,560   INFO  Database filter by min points Cyclist: 734 => 705
2024-09-11 21:43:23,568   INFO  Database filter by difficulty Car: 13532 => 10759
2024-09-11 21:43:23,569   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2024-09-11 21:43:23,569   INFO  Database filter by difficulty Cyclist: 705 => 581
2024-09-11 21:43:23,595   INFO  Loading KITTI dataset
2024-09-11 21:43:23,653   INFO  Total samples for KITTI dataset: 3712
2024-09-11 21:43:26,441   INFO  DistributedDataParallel(
  (module): VoxelRCNN(
    (vfe): MeanVFE()
    (backbone_3d): VCEConv8x(
      (conv_input): SparseSequential(
        (0): SubMConv3d(8, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (conv1): SparseSequential(
        (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (conv2): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv3): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv4): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv3d(64, 64, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (vir_conv1): NRConvBlock(
        (d3_conv1): SparseSequential(
          (0): SubMConv3d(8, 8, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv1): SparseSequential(
          (0): SubMConv2d(8, 8, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d3_conv2): SparseSequential(
          (0): SubMConv3d(8, 8, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv2): SparseSequential(
          (0): SubMConv2d(8, 8, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (vir_conv2): NRConvBlock(
        (down_layer): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (d3_conv1): SparseSequential(
          (0): SubMConv3d(32, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv1): SparseSequential(
          (0): SubMConv2d(16, 16, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d3_conv2): SparseSequential(
          (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv2): SparseSequential(
          (0): SubMConv2d(16, 16, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (vir_conv3): NRConvBlock(
        (down_layer): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (d3_conv1): SparseSequential(
          (0): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv1): SparseSequential(
          (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d3_conv2): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv2): SparseSequential(
          (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (vir_conv4): NRConvBlock(
        (down_layer): SparseSequential(
          (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (d3_conv1): SparseSequential(
          (0): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv1): SparseSequential(
          (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d3_conv2): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (d2_conv2): SparseSequential(
          (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (map_to_bev_module): HeightCompression()
    (backbone_2d): BaseBEVBackbone(
      (blocks): ModuleList(
        (0): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
        )
        (1): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
        )
      )
      (deblocks): ModuleList(
        (0): Sequential(
          (0): ConvTranspose2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (dense_head): AnchorHeadSingle(
      (cls_loss_func): SigmoidFocalClassificationLoss()
      (reg_loss_func): WeightedSmoothL1Loss()
      (dir_loss_func): WeightedCrossEntropyLoss()
      (od_loss_func): odiou_3D()
      (conv_cls): Conv2d(256, 18, kernel_size=(1, 1), stride=(1, 1))
      (conv_box): Conv2d(256, 42, kernel_size=(1, 1), stride=(1, 1))
      (conv_dir_cls): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (pfe): None
    (point_head): None
    (roi_head): CPVIOUHead(
      (reg_loss_func): WeightedSmoothL1Loss()
      (roi_grid_pool_layers): ModuleList(
        (0): NeighborVoxelSAModuleMSG(
          (groupers): ModuleList(
            (0): VoxelQueryAndGrouping()
            (1): VoxelQueryAndGrouping()
          )
          (mlps_in): ModuleList(
            (0): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_pos): ModuleList(
            (0): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_out): ModuleList(
            (0): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
          )
          (relu): ReLU()
        )
        (1): NeighborVoxelSAModuleMSG(
          (groupers): ModuleList(
            (0): VoxelQueryAndGrouping()
            (1): VoxelQueryAndGrouping()
          )
          (mlps_in): ModuleList(
            (0): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_pos): ModuleList(
            (0): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_out): ModuleList(
            (0): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
          )
          (relu): ReLU()
        )
      )
      (roi_grid_pool_layers_mm): ModuleList(
        (0): NeighborVoxelSAModuleMSG(
          (groupers): ModuleList(
            (0): VoxelQueryAndGrouping()
            (1): VoxelQueryAndGrouping()
          )
          (mlps_in): ModuleList(
            (0): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_pos): ModuleList(
            (0): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_out): ModuleList(
            (0): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
          )
          (relu): ReLU()
        )
        (1): NeighborVoxelSAModuleMSG(
          (groupers): ModuleList(
            (0): VoxelQueryAndGrouping()
            (1): VoxelQueryAndGrouping()
          )
          (mlps_in): ModuleList(
            (0): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_pos): ModuleList(
            (0): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Sequential(
              (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (mlps_out): ModuleList(
            (0): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
          )
          (relu): ReLU()
        )
      )
      (shared_fc_layer_og): Sequential(
        (0): Linear(in_features=27648, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU(inplace=True)
      )
      (shared_fc_layer_pg): Sequential(
        (0): Linear(in_features=8192, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU(inplace=True)
      )
      (cls_layers): ModuleList(
        (0): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=1, bias=True)
        )
        (1): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=1, bias=True)
        )
        (2): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=1, bias=True)
        )
      )
      (reg_layers): ModuleList(
        (0): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=7, bias=True)
        )
        (1): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=7, bias=True)
        )
        (2): Sequential(
          (0): Linear(in_features=1024, out_features=256, bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.01, inplace=False)
          (4): Linear(in_features=256, out_features=256, bias=False)
          (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Linear(in_features=256, out_features=7, bias=True)
        )
      )
      (cls_fc_og): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=1, bias=True)
        (8): Sigmoid()
      )
      (reg_fc_og): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=7, bias=True)
      )
      (cls_fc_pg): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=1, bias=True)
        (8): Sigmoid()
      )
      (reg_fc_pg): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=7, bias=True)
      )
      (conv_part): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 49, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (cross_attention_layer_og): CrossAttention(
        (pos_en): PositionalEmbedding()
        (Q_linear): Linear(in_features=264, out_features=256, bias=False)
        (K_linear): Linear(in_features=264, out_features=256, bias=False)
        (V_linear): Linear(in_features=264, out_features=256, bias=False)
        (att): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
      )
      (cross_attention_layer_pg): CrossAttention(
        (pos_en): PositionalEmbedding()
        (Q_linear): Linear(in_features=264, out_features=256, bias=False)
        (K_linear): Linear(in_features=264, out_features=256, bias=False)
        (V_linear): Linear(in_features=264, out_features=256, bias=False)
        (att): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
)
2024-09-11 21:43:26,443   INFO  **********************Start training models/kitti/CMF-IOU_wo_SD_wo_Res_multicls_v2(default)**********************
epochs:   0%|          | 0/20 [00:00<?, ?it/s]epochs:   0%|          | 0/20 [00:00<?, ?it/s]
train:   0%|          | 0/928 [00:00<?, ?it/s][A
train:   0%|          | 1/928 [00:22<5:54:31, 22.95s/it][A
train:   0%|          | 1/928 [00:22<5:54:31, 22.95s/it, total_it=1][Aepochs:   0%|          | 0/20 [00:55<?, ?it/s, loss=16.8, lr=0.001]epochs:   0%|          | 0/20 [00:55<?, ?it/s, loss=16.8, lr=0.001]
train:   0%|          | 2/928 [00:23<2:33:33,  9.95s/it, total_it=1][A
train:   0%|          | 2/928 [00:23<2:33:33,  9.95s/it, total_it=2][Aepochs:   0%|          | 0/20 [00:56<?, ?it/s, loss=8.65, lr=0.001]epochs:   0%|          | 0/20 [00:56<?, ?it/s, loss=8.65, lr=0.001]
train:   0%|          | 3/928 [00:24<1:29:09,  5.78s/it, total_it=2][A
train:   0%|          | 3/928 [00:24<1:29:09,  5.78s/it, total_it=3][Aepochs:   0%|          | 0/20 [00:57<?, ?it/s, loss=7.2, lr=0.001] epochs:   0%|          | 0/20 [00:57<?, ?it/s, loss=7.2, lr=0.001]
train:   0%|          | 4/928 [00:25<58:38,  3.81s/it, total_it=3]  [A
train:   0%|          | 4/928 [00:25<58:38,  3.81s/it, total_it=4][Aepochs:   0%|          | 0/20 [00:57<?, ?it/s, loss=7.62, lr=0.001]epochs:   0%|          | 0/20 [00:57<?, ?it/s, loss=7.62, lr=0.001]
train:   1%|          | 5/928 [00:26<45:39,  2.97s/it, total_it=4][A
train:   1%|          | 5/928 [00:26<45:39,  2.97s/it, total_it=5][Aepochs:   0%|          | 0/20 [00:59<?, ?it/s, loss=6.64, lr=0.001]epochs:   0%|          | 0/20 [00:59<?, ?it/s, loss=6.64, lr=0.001]
train:   1%|          | 6/928 [00:27<34:36,  2.25s/it, total_it=5][A
train:   1%|          | 6/928 [00:27<34:36,  2.25s/it, total_it=6][Aepochs:   0%|          | 0/20 [01:00<?, ?it/s, loss=94.6, lr=0.001]epochs:   0%|          | 0/20 [01:00<?, ?it/s, loss=94.6, lr=0.001]
train:   1%|          | 7/928 [00:28<27:29,  1.79s/it, total_it=6][A
train:   1%|          | 7/928 [00:28<27:29,  1.79s/it, total_it=7][Aepochs:   0%|          | 0/20 [01:01<?, ?it/s, loss=6.27, lr=0.001]epochs:   0%|          | 0/20 [01:01<?, ?it/s, loss=6.27, lr=0.001]
train:   1%|          | 8/928 [00:29<23:04,  1.50s/it, total_it=7][A
train:   1%|          | 8/928 [00:29<23:04,  1.50s/it, total_it=8][Aepochs:   0%|          | 0/20 [01:02<?, ?it/s, loss=6.11, lr=0.001]epochs:   0%|          | 0/20 [01:02<?, ?it/s, loss=6.11, lr=0.001]
train:   1%|          | 9/928 [00:34<40:42,  2.66s/it, total_it=8][A
train:   1%|          | 9/928 [00:34<40:42,  2.66s/it, total_it=9][Aepochs:   0%|          | 0/20 [01:07<?, ?it/s, loss=5.72, lr=0.001]epochs:   0%|          | 0/20 [01:07<?, ?it/s, loss=5.72, lr=0.001]
train:   1%|          | 10/928 [00:35<32:01,  2.09s/it, total_it=9][A
train:   1%|          | 10/928 [00:35<32:01,  2.09s/it, total_it=10][Aepochs:   0%|          | 0/20 [01:08<?, ?it/s, loss=676, lr=0.001] epochs:   0%|          | 0/20 [01:08<?, ?it/s, loss=676, lr=0.001]
train:   1%|          | 11/928 [00:36<26:03,  1.70s/it, total_it=10][A
train:   1%|          | 11/928 [00:36<26:03,  1.70s/it, total_it=11][Aepochs:   0%|          | 0/20 [01:08<?, ?it/s, loss=6.13, lr=0.001]epochs:   0%|          | 0/20 [01:08<?, ?it/s, loss=6.13, lr=0.001]
train:   1%|▏         | 12/928 [00:37<21:46,  1.43s/it, total_it=11][A
train:   1%|▏         | 12/928 [00:37<21:46,  1.43s/it, total_it=12][Aepochs:   0%|          | 0/20 [01:09<?, ?it/s, loss=5.38, lr=0.001]epochs:   0%|          | 0/20 [01:09<?, ?it/s, loss=5.38, lr=0.001][E ProcessGroupGloo.cpp:136] Rank 1 successfully reached monitoredBarrier, but received errors while waiting to be unblocked by rank 0. Please check rank 0 logs for faulty rank.
                                              Traceback (most recent call last):
  File "/home/ubuntu/zwning/CMF-IOU/tools/train.py", line 202, in <module>
    main()
  File "/home/ubuntu/zwning/CMF-IOU/tools/train.py", line 152, in main
    train_model(
  File "/home/ubuntu/zwning/CMF-IOU/tools/train_utils/train_utils.py", line 95, in train_model
    accumulated_iter = train_one_epoch(
  File "/home/ubuntu/zwning/CMF-IOU/tools/train_utils/train_utils.py", line 47, in train_one_epoch
    loss.backward()
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/_tensor.py", line 307, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/autograd/__init__.py", line 154, in backward
    Variable._execution_engine.run_backward(
RuntimeError: Rank 1 successfully reached monitoredBarrier, but received errors while waiting to be unblocked by rank 0. Please check rank 0 logs for faulty rank.
 Original exception: 
[../third_party/gloo/gloo/transport/tcp/pair.cc:589] Read error [127.0.1.1]:50059: Connection reset by peer
368
2654
3433
1123
1196
1885
1000
2344
435
3443
913
411
2832
1005
1235
1671
1462
273
1150
2657
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: -15) local_rank: 0 (pid: 809578) of binary: /home/ubuntu/anaconda3/envs/ted/bin/python3
Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/run.py", line 710, in run
    elastic_launch(
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/ubuntu/anaconda3/envs/ted/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 259, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
train.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2024-09-11_21:44:44
  host      : ubuntu
  rank      : 1 (local_rank: 1)
  exitcode  : 1 (pid: 809579)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-09-11_21:44:44
  host      : ubuntu
  rank      : 0 (local_rank: 0)
  exitcode  : -15 (pid: 809578)
  error_file: <N/A>
  traceback : Signal 15 (SIGTERM) received by PID 809578
============================================================
